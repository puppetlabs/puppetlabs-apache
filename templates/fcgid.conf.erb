###########################################################
# PUPPET MANAGED                                          #
# Do not edit this file on a server node unless you       #
# are willing to have your changes overwritten by         #
# Puppet.  If you really want to change the contents      #
# repository and check it out on the puppet server.          #
###########################################################
<IfModule mod_fcgid.c>
	AddHandler    fcgid-script .fcgi
	 
	# FcgidAccessChecker Directive
	# 
	# Description:	full path to FastCGI access checker
	# Syntax:	FcgidAccessChecker command
	# Default:	none
	# Context:	directory, .htaccess
	# Override:	FileInfo
	# Status:	External
	# Module:	mod_fcgid
	# Access checking or, more formally, access control, is a procedure which 
	# verifies that the client is allowed to access a resource, using some mechanism 
	# other than authentication and authorization.
	# 
	# Key environment variables passed to the application for access checking are:
	# 
	# FCGI_APACHE_ROLE
	# set to ACCESS_CHECKER; by checking the current role, the same FastCGI 
	# application can handle multiple stages of request processing
	# The application must output a Status line to indicate the result of the check.
	# 
	# Warning
	# 
	# Before 2.3.6, only one FastCGI application of any type (AAA or handler) can 
	# be used for a particular request URI. Otherwise, the wrong FastCGI application 
	# may be invoked for one or more phases of request processing.
	
	
	# FcgidAccessCheckerAuthoritative Directive
	# 
	# Description:	Set to 'off' to allow access control to be passed along to 
	# lower modules upon failure
	# Syntax:	FcgidAccessCheckerAuthoritative On|Off
	# Default:	FcgidAccessCheckerAuthoritative On
	# Context:	directory, .htaccess
	# Override:	FileInfo
	# Status:	External
	# Module:	mod_fcgid
	# This directive controls whether or not other access checkers are allowed to 
	# run when this module has an access checker configured and it fails a request. 
	# If this directive is On (default) and a FastCGI access checker returns a 
	# failure status, a failure is returned to the client without giving other 
	# access checkers a chance to allow access. If this directive is Off, other 
	# access checkers will be called.
	 
	 
	# FcgidAuthenticator Directive
	# 
	# Description:	full path to FastCGI authenticator
	# Syntax:	FcgidAuthenticator command
	# Default:	none
	# Context:	directory, .htaccess
	# Override:	FileInfo
	# Status:	External
	# Module:	mod_fcgid
	# Authentication is the procedure which verifies that the user is who they claim
	# they are. This directive specifies the full path to a FastCGI application 
	# which will handle authentication for a particular context, such as a directory.
	# 
	# Key environment variables passed to the application on authentication are:
	# 
	# REMOTE_USER
	# set to the user id of the client
	# REMOTE_PASSWD
	# set to the plain text password provided by the client
	# FCGI_APACHE_ROLE
	# set to AUTHENTICATOR; by checking the current role, the same FastCGI 
	# application can handle multiple stages of request processing
	# The application must output a Status line to indicate the result of 
	# authentication.
	# 
	# Warning
	# 
	# Before 2.3.6, only one FastCGI application of any type (AAA or handler) can 
	# be used for a particular request URI. Otherwise, the wrong FastCGI application 
	# may be invoked for one or more phases of request processing.
	
	 
	# FcgidAuthenticatorAuthoritative Directive
	# 
	# Description:	Set to 'off' to allow authentication to be passed along to 
	# lower modules upon failure
	# Syntax:	FcgidAuthenticatorAuthoritative On|Off
	# Default:	FcgidAuthenticatorAuthoritative On
	# Context:	directory, .htaccess
	# Override:	FileInfo
	# Status:	External
	# Module:	mod_fcgid
	# This directive controls whether or not other authenticators are allowed to 
	# run when this module has an authenticator configured and it fails a request. 
	# If this directive is On (default) and a FastCGI authenticator returns a 
	# failure status, a failure is returned to the client without giving other 
	# authenticators a chance to validate the client identity. If this directive 
	# is Off, other authenticators will be called.
	
	
	# FcgidAuthorizer Directive
	# 
	# Description:	full path to FastCGI authorizer
	# Syntax:	FcgidAuthorizer command
	# Default:	none
	# Context:	directory, .htaccess
	# Override:	FileInfo
	# Status:	External
	# Module:	mod_fcgid
	# Authorization is the procedure which verifies that the user is allowed to 
	# access a particular resource. This directive specifies the full path to a 
	# FastCGI application which will handle authorization for a particular context, 
	# such as a directory.
	# 
	# Key environment variables passed to the application on authorization are:
	# 
	# REMOTE_USER
	# set to the user id of the client, which has already been authenticated
	# FCGI_APACHE_ROLE
	# set to AUTHORIZER; by checking the current role, the same FastCGI application 
	# can handle multiple stages of request processing
	# The application must output a Status line to indicate the result of 
	# authorization.
	# 
	# Warning
	# 
	# Before 2.3.6, only one FastCGI application of any type (AAA or handler) can be 
	# used for a particular request URI. Otherwise, the wrong FastCGI application 
	# may be invoked for one or more phases of request processing.
	
	
	# FcgidAuthorizerAuthoritative Directive
	# 
	# Description:	Set to 'off' to allow authorization to be passed along to 
	# lower modules upon failure
	# Syntax:	FcgidAuthorizerAuthoritative On|Off
	# Default:	FcgidAuthorizerAuthoritative On
	# Context:	directory, .htaccess
	# Override:	FileInfo
	# Status:	External
	# Module:	mod_fcgid
	# This directive controls whether or not other authorizers are allowed to run 
	# when this module has an authorizer configured and it fails a request. If this 
	# directive is On (default) and a FastCGI authorizer returns a failure status, 
	# a failure is returned to the client without giving other authorizer a chance 
	# to access the resource. If this directive is Off, other authorizers will be 
	# called.
	 
	 
	# FcgidBusyScanInterval Directive
	# 
	# Description:	scan interval for busy timeout process
	# Syntax:	FcgidBusyScanInterval seconds
	# Default:	FcgidBusyScanInterval 120
	# Context:	server config
	# Status:	External
	# Module:	mod_fcgid
	# The module performs the FcgidBusyTimeout check at this interval.
	# FcgidBusyScanInterval 60
	 
	# FcgidBusyTimeout Directive
	# 
	# Description:	a FastCGI application will be killed after handling a request 
	# for FcgidBusyTimeout
	# Syntax:	FcgidBusyTimeout seconds
	# Default:	FcgidBusyTimeout 300
	# Context:	server config, virtual host
	# Status:	External
	# Module:	mod_fcgid
	# This is the maximum time limit for request handling. If a FastCGI request 
	# does not complete within FcgidBusyTimeout seconds, it will be subject to 
	# termination. Because the check is performed at the interval defined by 
	# FcgidBusyScanInterval, request handling may be allowed to proceed for a 
	# longer period of time.
	# 
	# The purpose of this directive is to terminate hung applications. The default 
	# timeout may need to be increased for applications that can take longer to 
	# process the request.
	FcgidBusyTimeout	180 
	 
	# FcgidCmdOptions Directive
	# 
	# Description:	Set processing options for a FastCGI command
	# Syntax:	FcgidCmdOptions command option [option] ...
	# Context:	server config, virtual host
	# Status:	External
	# Module:	mod_fcgid
	# This directive allows processing options to be specified for a specific 
	# command spawned by mod_fcgid. Each option for the command corresponds to 
	# another directive that normally applies to all commands started within a 
	# particular context. If a particular option is not specified on this directive, 
	# the default will be used.
	# 
	# The following table provides a list of options and corresponding directives:
	# 
	# Option name and syntax	Corresponding directive
	# ConnectTimeout seconds	FcgidConnectTimeout
	# IdleTimeout seconds	FcgidIdleTimeout
	# InitialEnv name[=value]	FcgidInitialEnv
	# IOTimeout seconds	FcgidIOTimeout
	# MaxProcesses value	FcgidMaxProcessesPerClass
	# MaxProcessLifeTime seconds	FcgidProcessLifeTime
	# MaxRequestsPerProcess value	FcgidMaxRequestsPerProcess
	# MinProcesses value	FcgidMinProcessesPerClass
	# Multiple environment variables are defined by repeating the InitialEnv option.
	# 
	# Example
	# 
	# FcgidCmdOptions /usr/local/bin/wrapper \
	# InitialEnv MAX_REQUESTS=2000 \
	# MaxRequestsPerProcess 2000 \
	# IOTimeout 90
	# When /usr/local/bin/wrapper is spawned, its initial environment contains the 
	# MAX_REQUESTS=2000 environment variable setting; additionally, mod_fcgid will 
	# terminate it after it has handled 2000 requests, and I/O operations will time 
	# out after 90 seconds. Directives corresponding to other options, such as 
	# FcgidIdleTimeout or FcgidProcessLifeTime, will be ignored for this command; 
	# defaults will be used for options not specified on FcgidCmdOptions.
	 
	 
	# FcgidConnectTimeout Directive
	# 
	# Description:	Connect timeout to FastCGI server
	# Syntax:	FcgidConnectTimeout seconds
	# Default:	FcgidConnectTimeout 3
	# Context:	server config, virtual host
	# Status:	External
	# Module:	mod_fcgid
	# This is the maximum period of time the module will wait while trying to 
	# connect to a FastCGI application on Windows. (This directive is not respected 
	# on Unix, where AF_UNIX defaults will apply.)
	# 
	# This setting will apply to all applications spawned for this server or virtual 
	# host. Use FcgidCmdOptions to apply this setting to a single application.
	FcgidConnectTimeout 3
	 
	# FcgidErrorScanInterval Directive
	# 
	# Description:	scan interval for exited process
	# Syntax:	FcgidErrorScanInterval seconds
	# Default:	FcgidErrorScanInterval 3
	# Context:	server config
	# Status:	External
	# Module:	mod_fcgid
	# This is the interval at which the module will handle pending process 
	# termination. Termination is pending for any processes which have exceeded 
	# FcgidIdleTimeout or FcgidProcessLifeTime.
	# 
	# Unix: mod_fcgid will terminate such processes with SIGTERM; if the process is 
	# still active during the next scan, the process will be terminated with 
	# SIGKILL. Thus, this directive controls the amount of time for orderly process 
	# terminate before being forcibly killed.
	FcgidErrorScanInterval	3
	 
	# FcgidFixPathinfo Directive
	# 
	# Description:	Mirror the PHP cgi.fix_pathinfo setting
	# Syntax:	FcgidFixPathinfo 1
	# Default:	FcgidFixPathinfo 0
	# Context:	server config
	# Status:	External
	# Module:	mod_fcgid
	# This directive enables special SCRIPT_NAME processing which allows PHP to 
	# provide additional path information. The setting of FcgidFixPathinfo should 
	# mirror the cgi.fix_pathinfo setting in php.ini.
	FcgidFixPathinfo 1
	 
	# FcgidIdleScanInterval Directive
	# 
	# Description:	scan interval for idle timeout process
	# Syntax:	FcgidIdleScanInterval seconds
	# Default:	FcgidIdleScanInterval 120
	# Context:	server config
	# Status:	External
	# Module:	mod_fcgid
	# This is the interval at which the module will search for processes which have 
	# exceeded FcgidIdleTimeout or FcgidProcessLifeTime.
	FcgidIdleScanInterval	120 
	 
	# FcgidIdleTimeout Directive
	# 
	# Description:	An idle FastCGI application will be killed after 
	# 	FcgidIdleTimeout
	# Syntax:	FcgidIdleTimeout seconds
	# Default:	FcgidIdleTimeout 300
	# Context:	server config, virtual host
	# Status:	External
	# Module:	mod_fcgid
	# Application processes which have not handled a request for this period of 
	# time will be terminated, if the number of processses for the class exceeds 
	# FcgidMinProcessesPerClass. A value of 0 disables the check.
	# 
	# This idle timeout check is performed at the frequency of the configured 
	# FcgidIdleScanInterval.
	# 
	# This setting will apply to all applications spawned for this server or virtual 
	# host. Use FcgidCmdOptions to apply this setting to a single application.
	FcgidIdleTimeout	300
	 
	# FcgidInitialEnv Directive
	# 
	# Description:	an environment variable name and optional value to pass to 
	# FastCGI.
	# Syntax:	FcgidInitialEnv name [ value ]
	# Default:	none
	# Context:	server config, virtual host
	# Status:	External
	# Module:	mod_fcgid
	# Use FcgidInitialEnv to define environment variables to pass to the FastCGI 
	# application. This directive can be used multiple times.
	# 
	# This setting will apply to all applications spawned for this server or virtual 
	# host. Use FcgidCmdOptions to apply this setting to a single application.
	 
	 
	# FcgidIOTimeout Directive
	# 
	# Description:	Communication timeout to FastCGI server
	# Syntax:	FcgidIOTimeout seconds
	# Default:	FcgidIOTimeout 40
	# Context:	server config, virtual host
	# Status:	External
	# Module:	mod_fcgid
	# This is the maximum period of time the module will wait while trying to read 
	# from or write to a FastCGI application.
	# 
	# Note
	# 
	# The FastCGI application must begin generating the response within this period 
	# of time. Increase this directive as necessary to handle applications which 
	# take a relatively long period of time to respond.
	# This setting will apply to all applications spawned for this server or virtual 
	# host. Use FcgidCmdOptions to apply this setting to a single application.
	FcgidIOTimeout 		300
	 
	# FcgidIPCDir Directive
	# 
	# Description:	directory for AF_UNIX sockets (Unix) or pipes (Windows)
	# Syntax:	FcgidIPCDir pathname
	# Default:	FcgidIPCDir logs/fcgidsock
	# Context:	server config
	# Status:	External
	# Module:	mod_fcgid
	# This module uses AF_UNIX sockets or named pipes, depending on the platform, to 
	# communicate with FastCGI applications. This directive specifies the directory 
	# where those sockets or named pipes will be created.
	
	
	# FcgidMaxProcesses Directive
	# 
	# Description:	maximum number of FastCGI application processes
	# Syntax:	FcgidMaxProcesses value
	# Default:	FcgidMaxProcesses 1000
	# Context:	server config
	# Status:	External
	# Module:	mod_fcgid
	# This directive sets the maximum number of FastCGI application processes which 
	# can be active at one time.
	FcgidMaxProcesses	100 
	 
	# FcgidMaxProcessesPerClass Directive
	# 
	# Description:	Max process count of one class of FastCGI application
	# Syntax:	FcgidMaxProcessesPerClass value
	# Default:	FcgidMaxProcessesPerClass 100
	# Context:	server config, virtual host
	# Status:	External
	# Module:	mod_fcgid
	# This directive sets the maximum number of processes that can be started for 
	# each process class.
	# 
	# This setting will apply to all applications spawned for this server or virtual 
	# host. Use FcgidCmdOptions to apply this setting to a single application.
	FcgidMaxProcessesPerClass	12
	 
	# FcgidMaxRequestInMem Directive
	# 
	# Description:	maximum size of a request which will be held in memory
	# Syntax:	FcgidMaxRequestInMem bytes
	# Default:	FcgidMaxRequestInMem 65536
	# Context:	server config, virtual host
	# Status:	External
	# Module:	mod_fcgid
	# This module reads the entire request body from the client before sending it 
	# to the application. Normally the request body will be stored in memory. Once 
	# the amount of request body read from the client exceeds FcgidMaxRequestInMem 
	# bytes, the remainder of the request body will be stored in a temporary file.
	#FcgidMaxRequestInMem 65536
	 
	# FcgidMaxRequestLen Directive
	# 
	# Description:	maximum HTTP request length
	# Syntax:	FcgidMaxRequestLen bytes
	# Default:	FcgidMaxRequestLen 131072
	# Context:	server config, virtual host
	# Status:	External
	# Module:	mod_fcgid
	# If the size of the request body exceeds this amount, the request will fail 
	# with 500 Server Error.
	# 
	# Administrators should change this to an appropriate value for their site based 
	# on application requirements.
	# 
	# Warning
	# 
	# Before 2.3.6, this defaulted to 1GB. Most users of earlier versions should use 
	# this directive to set a more reasonable limit.
	# See also
	# FcgidMaxRequestInMem
	FcgidMaxRequestLen 8097152
	
	# FcgidMaxRequestsPerProcess Directive
	# 
	# Description:	Max requests handled by each FastCGI application
	# Syntax:	FcgidMaxRequestsPerProcess value
	# Default:	FcgidMaxRequestsPerProcess 0
	# Context:	server config, virtual host
	# Status:	External
	# Module:	mod_fcgid
	# FastCGI application processes will be terminated after handling the specified 
	# number of requests. A value of 0 disables the check.
	# 
	# Note
	# 
	# A value of -1 is currently accepted for ease of migration for existing 
	# configurations. It is treated the same as 0.
	# Certain applications, notably PHP as FastCGI, have their own facility for 
	# terminating after handling a certain number of requests. This directive can be 
	# used to avoid sending additional requests to the application after it has 
	# handled its limit.
	# 
	# Note
	# 
	# If this is set such that frequent process creation will be required, you will 
	# likely need to adjust FcgidSpawnScoreUpLimit or other score-related directives 
	# to allow more frequent process creation.
	# This setting will apply to all applications spawned for this server or virtual 
	# host. Use FcgidCmdOptions to apply this setting to a single application.
	FcgidMaxRequestsPerProcess 4000
	 
	# FcgidMinProcessesPerClass Directive
	# 
	# Description:	Min process count of one class of FastCGI application
	# Syntax:	FcgidMinProcessesPerClass value
	# Default:	FcgidMinProcessesPerClass 3
	# Context:	server config, virtual host
	# Status:	External
	# Module:	mod_fcgid
	# This directive sets the minimum number of processes that will be retained in a 
	# process class after finishing requests.
	# 
	# This setting will apply to all applications spawned for this server or virtual 
	# host. Use FcgidCmdOptions to apply this setting to a single application.
	FcgidMinProcessesPerClass	1
	 
	# FcgidOutputBufferSize Directive
	# 
	# Description:	CGI output buffer size
	# Syntax:	FcgidOutputBufferSize bytes
	# Default:	FcgidOutputBufferSize 65536
	# Context:	server config, virtual host
	# Status:	External
	# Module:	mod_fcgid
	# This is the maximum amount of response data the module will read from the 
	# FastCGI application before flushing the data to the client.
	# FcgidOutputBufferSize 65536
	 
	# FcgidPassHeader Directive
	# 
	# Description:	Header name which will be passed to FastCGI as environment 
	# 	variable.
	# Syntax:	FcgidPassHeader name
	# Default:	none
	# Context:	server config, virtual host
	# Status:	External
	# Module:	mod_fcgid
	# This directive specifies the name of a request header which will be passed to 
	# the FastCGI application as an environment variable. The name of the 
	# environment variable is derived from the value specified on this directive, 
	# as discussed below:
	# 
	# The legacy behavior is to use the value specified on this directive as the 
	# environment variable name, converting hyphens to underscores. No case 
	# conversion is performed.
	# 
	# Beginning with release 2.3.6, an additional environment variable is created. 
	# The value specified on this directive is converted to upper case, prefixed 
	# with HTTP_, and hyphens are converted to underscores.
	# 
	# Note
	# 
	# Most request headers are already available to the application as environment 
	# variables, and generally are prefixed with HTTP_. (Notable exceptions are 
	# Content-type and Content-length, which do not have the HTTP_ prefix.) Thus, 
	# this directive is only required for request headers that are purposefully 
	# omitted, such as Authorization and Proxy-Authorization. Only pass these 
	# request headers if absolutely required.
	
	 
	# FcgidProcessLifeTime Directive
	# 
	# Description:	maximum FastCGI application process lifetime
	# Syntax:	FcgidProcessLifeTime seconds
	# Default:	FcgidProcessLifeTime 3600
	# Context:	server config, virtual host
	# Status:	External
	# Module:	mod_fcgid
	# Idle application processes which have existed for greater than this time will 
	# be terminated, if the number of processses for the class exceeds 
	# FcgidMinProcessesPerClass. A value of 0 disables the check.
	# 
	# This process lifetime check is performed at the frequency of the configured 
	# FcgidIdleScanInterval.
	# 
	# This setting will apply to all applications spawned for this server or virtual 
	# host. Use FcgidCmdOptions to apply this setting to a single application.
	FcgidProcessLifeTime 600
	
	# FcgidProcessTableFile Directive
	# 
	# Description:	shared memory file path
	# Syntax:	FcgidProcessTableFile pathname
	# Default:	FcgidProcessTableFile logs/fcgid_shm
	# Context:	server config
	# Status:	External
	# Module:	mod_fcgid
	# This module uses shared memory on Unix to maintain state which is shared 
	# between httpd processes. This directive specifies the name of the shared 
	# memory file.
	 
	 
	# FcgidSpawnScore Directive
	# 
	# Description:	Each spawn adds this value to the process activity score.
	# Syntax:	FcgidSpawnScore value
	# Default:	FcgidSpawnScore 1
	# Context:	server config
	# Status:	External
	# Module:	mod_fcgid
	# Lower values of this directive increase the allowed spawn rate.
	# 
	# Refer to the FcgidSpawnScoreUpLimit directive for more information.
	 
	 
	# FcgidSpawnScoreUpLimit Directive
	# 
	# Description:	Maximum value of the process activity score which allows a 
	# spawn to occur
	# Syntax:	FcgidSpawnScoreUpLimit value
	# Default:	FcgidSpawnScoreUpLimit 10
	# Context:	server config
	# Status:	External
	# Module:	mod_fcgid
	# A process activity score is maintained for each FastCGI application; the 
	# score is used to control the rate of spawning in order to avoid placing too 
	# much load on the system, particularly for applications that are repeatedly 
	# exiting abnormally.
	# 
	# The value of FcgidSpawnScore is added to the score for every spawned 
	# application process. The value of FcgidTerminationScore is added to the score 
	# for every terminated application process. The value of FcgidTimeScore is 
	# subtracted from the score every second.
	# 
	# When the current score is higher than the value of FcgidSpawnScoreUpLimit, no 
	# additional application processes will be spawned; subsequent requests must 
	# wait until an existing process is free or until the score decreases below the 
	# limit.
	# 
	# If the limit is reached under normal load, it may not be sufficient to simply 
	# increase the limit, as that would only delay the amount of time before the 
	# limit is reached again. Decrease the value of FcgidSpawnScore and/or 
	# FcgidTerminationScore, or increase the value of FcgidTimeScore, to allow a 
	# higher rate of spawning.
	 
	 
	# FcgidTerminationScore Directive
	# 
	# Description:	Each terminated process adds this value to the process 
	# 	activity score.
	# Syntax:	FcgidTerminationScore value
	# Default:	FcgidTerminationScore 2
	# Context:	server config
	# Status:	External
	# Module:	mod_fcgid
	# Lower values of this directive increase the allowed spawn rate. Negative 
	# values can be useful in some circumstances, such as allowing process 
	# replacement without increasing the score.
	# 
	# Refer to the FcgidSpawnScoreUpLimit directive for more information.
	 
	 
	# FcgidTimeScore Directive
	# 
	# Description:	Amount subtracted from process activity score each second
	# Syntax:	FcgidTimeScore value
	# Default:	FcgidTimeScore 1
	# Context:	server config
	# Status:	External
	# Module:	mod_fcgid
	# Higher values of this directive increase the allowed spawn rate.
	# 
	# Refer to the FcgidSpawnScoreUpLimit directive for more information.
	 
	 
	# FcgidWrapper Directive
	# 
	# Description:	The CGI wrapper setting
	# Syntax:	FcgidWrapper command [ suffix ] [ virtual ]
	# Default:	none
	# Context:	server config, virtual host, directory, .htaccess
	# Override:	FileInfo
	# Status:	External
	# Module:	mod_fcgid
	# The given commandmmand is used to spawn FCGI server processes. If this 
	# directive is not used, the file pointed to by the request URL will be used 
	# instead. Options for the command can be included using quotation marks 
	# surrounding the command and options.
	# 
	# The optional suffix argument restricts the use of this FCGI server to all URLs 
	# with the given exact path suffix. A suffix needs to start with '.'.
	# 
	# The virtual flag signals that there will be no check whether the request URL 
	# actually points to an existing file. The only file which needs to exist is the 
	# wrapper itself.
	# 
	# The directive can be used multiple times. A wrapper defined without a suffix 
	# is used as a default in case no suffix matches.
	
	 
	# FcgidZombieScanInterval Directive
	# 
	# Description:	scan interval for zombie process
	# Syntax:	FcgidZombieScanInterval seconds
	# Default:	FcgidZombieScanInterval 3
	# Context:	server config
	# Status:	External
	# Module:	mod_fcgid
	# The module checks for exited FastCGI applications at this interval. During 
	# this period of time, the application may exist in the process table as a 
	# zombie (on Unix).
	FcgidZombieScanInterval	3
</IfModule>